import{_ as s,c as a,o as n,d as l}from"./app.2a74e67e.js";const i=JSON.parse('{"title":"WeakMap 弱映射","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本 API","slug":"基本-api","link":"#基本-api","children":[]},{"level":2,"title":"弱键","slug":"弱键","link":"#弱键","children":[]},{"level":2,"title":"不可迭代键","slug":"不可迭代键","link":"#不可迭代键","children":[]},{"level":2,"title":"使用弱映射","slug":"使用弱映射","link":"#使用弱映射","children":[]}],"relativePath":"gemstone/Chapter 6 集合引用类型/WeakMap.md","lastUpdated":1677131280000}'),o={name:"gemstone/Chapter 6 集合引用类型/WeakMap.md"},p=l(`<h1 id="weakmap-弱映射" tabindex="-1">WeakMap 弱映射 <a class="header-anchor" href="#weakmap-弱映射" aria-hidden="true">#</a></h1><p>难度：⭐️⭐️</p><blockquote><p>💌 ECMAScript 6 新增的“弱映射”（WeakMap）是一种新的集合类型，为这门语言带来了<strong>增强的键/值对存储机制</strong>。WeakMap 是 Map 的“兄弟”类型，<strong>其 API 也是 Map 的子集</strong>。<br> WeakMap 中的“weak”（弱），描述的是 JavaScript <strong>垃圾回收程序对待“弱映射”中键的方式</strong>。</p></blockquote><h2 id="基本-api" tabindex="-1">基本 API <a class="header-anchor" href="#基本-api" aria-hidden="true">#</a></h2><blockquote><p><code>set()</code> | <code>get()</code> <code>has()</code> | <code>delete()</code></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>弱映射中的 <strong>“键”: 只能是 Object 或者继承自 Object 的类型</strong>，尝试使用非对象设置键会抛出 TypeError。“值”的类型没有限制。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化是全有或全无的操作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只要有一个键无效就会抛出错误，导致整个初始化失败</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wm2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">  [key1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BADKEY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [key3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// TypeError: Invalid value used as WeakMap key</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> wm2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ReferenceError: wm2 is not defined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原始值可以先包装成对象再用作键</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stringKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wm3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">  stringKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(wm3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(stringKey))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;val1&quot;</span></span>
<span class="line"></span></code></pre></div><p>初始化之后可以使用 <code>set()</code> 再添加键/值对，可以使用 <code>get()</code>和 <code>has()</code>查询，还可以使用 <code>delete()</code>删除（同 Map）。</p><h2 id="弱键" tabindex="-1">弱键 <a class="header-anchor" href="#弱键" aria-hidden="true">#</a></h2><p>WeakMap 中“weak”表示弱映射的键是“弱弱地拿着”的。意思就是，<strong>这些键不属于正式的引用，不会阻止垃圾回收</strong>。<br>但要注意的是，<strong>弱映射中值的引用可不是“弱弱地拿着”的</strong>。只要键存在，键/值对就会存在于映射中，并被当作对值的引用，因此就不会被当作垃圾回收。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> container </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeReference</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>container</code> 对象维护着一个对弱映射键的引用，因此这个<strong>对象键不会成为垃圾回收的目标</strong>。不过，如果调用了 <code>removeReference()</code>，就会<strong>摧毁键对象的最后一个引用</strong>，垃圾回收程序就可以把这个键/值对清理掉。</p><h2 id="不可迭代键" tabindex="-1">不可迭代键 <a class="header-anchor" href="#不可迭代键" aria-hidden="true">#</a></h2><p>因为 WeakMap 中的键/值对任何时候都可能被销毁(GC)，所以没必要提供迭代其键/值对的能力。当然，也用不着像 <code>clear()</code>这样一次性销毁所有键/值的方法。</p><p>WeakMap 实例之所以限制只能用对象作为键，是为了保证<strong>只有通过键对象的引用才能取得值</strong>。</p><blockquote><p>如果允许原始值，那就没办法区分<strong>初始化时</strong>使用的字符串字面量和<strong>初始化之后</strong>使用的一个相等的字符串了。</p></blockquote><h2 id="使用弱映射" tabindex="-1">使用弱映射 <a class="header-anchor" href="#使用弱映射" aria-hidden="true">#</a></h2><ul><li><p>私有变量（略）</p></li><li><p>DOM 节点元数据</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> loginButton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 给这个节点关联一些元数据</span></span>
<span class="line"><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(loginButton</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">disabled</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>❌ 假设在上面的代码执行后，页面被 JavaScript 改变了，<strong>原来的登录按钮从 DOM 树中被删掉了</strong>。但由于映射中还保存着按钮的引用，所以<strong>对应的 DOM 节点仍然会逗留在内存中</strong>，除非明确将其从映射中删除或者等到映射本身被销毁。<br><br> ✔︎ 如果这里使用的是<strong>弱映射</strong>，如以下代码所示，那么当节点从 DOM 树中被删除后，<strong>垃圾回收程序就可以立即释放其内存</strong>（假设没有其他地方引用这个对象）：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> loginButton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 给这个节点关联一些元数据</span></span>
<span class="line"><span style="color:#A6ACCD;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(loginButton</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">disabled</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li></ul>`,19),e=[p];function t(c,r,D,y,A,F){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{i as __pageData,d as default};
