import{_ as s,c as n,o as a,d as o}from"./app.89833151.js";const d=JSON.parse('{"title":"window 对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"Global 作用域","slug":"global-作用域","link":"#global-作用域","children":[]},{"level":2,"title":"像素比","slug":"像素比","link":"#像素比","children":[]},{"level":2,"title":"视口位置","slug":"视口位置","link":"#视口位置","children":[]}],"relativePath":"gemstone/Chapter 12 BOM/window.md","lastUpdated":1677157187000}'),l={name:"gemstone/Chapter 12 BOM/window.md"},p=o(`<blockquote><p>BOM(Browser Object Model) 是使用 JavaScript 开发 Web 应用程序的核心。BOM 提供了与网页无关的<strong>浏览器功能对象</strong>。</p></blockquote><hr><h1 id="window-对象" tabindex="-1">window 对象 <a class="header-anchor" href="#window-对象" aria-hidden="true">#</a></h1><p>难度：⭐️⭐️</p><blockquote><p>💌 BOM 的核心是 window 对象，表示<strong>浏览器的实例</strong>。</p></blockquote><p>window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 <strong><code>Global</code> 对象</strong>，另一个就是 <strong>浏览器窗口的 JavaScript 接口</strong>。这意味着网页中定义的所有对象、变量和函数都以 window 作为其 Global 对象，都可以访问其上定义的 parseInt()等全局方法。</p><h2 id="global-作用域" tabindex="-1">Global 作用域 <a class="header-anchor" href="#global-作用域" aria-hidden="true">#</a></h2><p>因为 <code>window</code> 对象被复用为 ECMAScript 的 Global 对象，所以<strong>通过 <code>var</code> 声明的所有全局变量和函数都会变成 <code>window</code> 对象的属性和方法</strong>。但是如果使用 <code>let</code> 或 <code>const</code> 替代 <code>var</code>，则不会把变量添加给全局对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// var</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">peter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// peter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// let const</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">29</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sayAge </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#82AAFF;">sayAge</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayAge</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// TypeError: window.sayAge is not a function</span></span>
<span class="line"></span></code></pre></div><blockquote><p>JavaScript 中有很多对象都暴露在全局作用域中，比如 <code>location</code> 和 <code>navigator</code>，因而它们也是 <code>window</code> 对象的属性。</p></blockquote><h2 id="像素比" tabindex="-1">像素比 <a class="header-anchor" href="#像素比" aria-hidden="true">#</a></h2><p>看到一个之前没见过的定义：<br> CSS 像素是 Web 开发中使用的统一像素单位。<strong>这个单位的背后其实是一个角度：0.0213°</strong>。 （如果屏幕距离人眼是一臂长，则以这个角度计算的 CSS 像素大小约为 1/96 英寸。）<br>这样定义像素大小是为了<strong>在不同设备上统一标准</strong>。</p><h2 id="视口位置" tabindex="-1">视口位置 <a class="header-anchor" href="#视口位置" aria-hidden="true">#</a></h2><p>度量<strong>文档相对于视口滚动距离</strong>的属性有两对，返回相等的值：<code>window.pageXoffset / window.scrollX</code> 和 <code>window.pageYoffset / window.scrollY</code>。</p><p>可以使用 <code>scroll()</code>、<code>scrollTo()</code>和 <code>scrollBy()</code>方法滚动页面：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 相对于当前视口向右滚动 40 像素</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollBy</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 滚动到页面左上角</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollTo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这几个方法也都接收一个 <strong><code>ScrollToOptions</code> 字典</strong>，除了提供偏移值，还可以通过 <strong><code>behavior</code></strong> 属性告诉浏览器是否<strong>平滑滚动</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 正常滚动</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollTo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">behavior</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auto</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 平滑滚动</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollTo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">behavior</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">smooth</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,18),e=[p];function t(c,r,i,y,D,C){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{d as __pageData,F as default};
