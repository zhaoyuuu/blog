import{_ as s,c as a,o as n,d as l}from"./app.cebf1889.js";const C=JSON.parse('{"title":"WeakSet 弱集合","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本 API","slug":"基本-api","link":"#基本-api","children":[]},{"level":2,"title":"弱值","slug":"弱值","link":"#弱值","children":[]},{"level":2,"title":"不可迭代值","slug":"不可迭代值","link":"#不可迭代值","children":[]}],"relativePath":"gemstone/Chapter 6 集合引用类型/WeakSet.md","lastUpdated":1677148163000}'),e={name:"gemstone/Chapter 6 集合引用类型/WeakSet.md"},o=l(`<h1 id="weakset-弱集合" tabindex="-1">WeakSet 弱集合 <a class="header-anchor" href="#weakset-弱集合" aria-hidden="true">#</a></h1><p>难度：⭐️⭐️</p><blockquote><p>💌 WeakSet 是 Set 的“兄弟”类型，<strong>其 API 也是 Set 的子集</strong>。WeakSet 中的“weak”（弱），描述的是 JavaScript <strong>垃圾回收程序对待“弱集合”中值的方式</strong>。</p></blockquote><blockquote><p>✨ <code>WeakSet 和 Set 的关系</code> 相比于 <code>WeakMap 和 Map 的关系</code>，不能说一模一样，只能说是一个模子刻出来的（WeakMap 弱的是“键”，WeakSet 弱的是“值”）。</p></blockquote><h2 id="基本-api" tabindex="-1">基本 API <a class="header-anchor" href="#基本-api" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ws </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakSet</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>弱集合中的<strong>值只能是 Object 或者继承自 Object 的类型</strong>，尝试使用非对象设置值会抛出 TypeError。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始化是全有或全无的操作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只要有一个值无效就会抛出错误，导致整个初始化失败</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ws2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakSet</span><span style="color:#A6ACCD;">([val1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BADVAL</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val3])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// TypeError: Invalid value used in WeakSet</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> ws2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ReferenceError: ws2 is not defined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原始值可以先包装成对象再用作值</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stringVal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ws3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakSet</span><span style="color:#A6ACCD;">([stringVal])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(ws3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#A6ACCD;">(stringVal))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="弱值" tabindex="-1">弱值 <a class="header-anchor" href="#弱值" aria-hidden="true">#</a></h2><p>同 <a href="/blog/gemstone/Chapter 6 集合引用类型/WeakMap.html#弱键">WeakMap 弱键</a>，只不过<strong>弱键变成了弱值</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ws </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakSet</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> container </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeReference</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>container</code> 对象维护着一个<strong>对弱集合值的引用</strong>，因此这个对象值不会成为垃圾回收的目标。不过，如果调用了 <code>removeReference()</code>，就会<strong>摧毁值对象的最后一个引用</strong>，垃圾回收程序就可以把这个值清理掉。</p><h2 id="不可迭代值" tabindex="-1">不可迭代值 <a class="header-anchor" href="#不可迭代值" aria-hidden="true">#</a></h2><p>WeakSet 之所以限制只能用对象作为值，是为了保证<strong>只有通过值对象的引用才能取得值</strong>。</p><blockquote><p>如果允许原始值，那就没办法区分<strong>初始化时</strong>使用的字符串字面量和<strong>初始化之后</strong>使用的一个相等的字符串了。</p></blockquote><br><hr><p>WeakSet 和 WeakMap 实在是太像了。</p>`,18),p=[o];function t(c,r,D,y,i,A){return n(),a("div",null,p)}const d=s(e,[["render",t]]);export{C as __pageData,d as default};
