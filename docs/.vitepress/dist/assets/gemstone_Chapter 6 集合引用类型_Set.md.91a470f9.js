import{_ as s,c as a,o as n,d as o}from"./app.89833151.js";const C=JSON.parse('{"title":"Set 集合","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本 API","slug":"基本-api","link":"#基本-api","children":[]},{"level":2,"title":"顺序与迭代","slug":"顺序与迭代","link":"#顺序与迭代","children":[]}],"relativePath":"gemstone/Chapter 6 集合引用类型/Set.md","lastUpdated":1677148163000}'),l={name:"gemstone/Chapter 6 集合引用类型/Set.md"},p=o(`<h1 id="set-集合" tabindex="-1">Set 集合 <a class="header-anchor" href="#set-集合" aria-hidden="true">#</a></h1><p>难度：⭐️</p><blockquote><p>💌 ECMAScript 6 新增的 Set 是一种新集合类型，为这门语言带来<strong>集合数据结构</strong>。Set 在很多方面都像是<strong>加强的 Map</strong>，这是因为它们的大多数 API 和行为都是共有的。</p></blockquote><h2 id="基本-api" tabindex="-1">基本 API <a class="header-anchor" href="#基本-api" aria-hidden="true">#</a></h2><blockquote><p><code>add()</code> | <code>has()</code> | <code>size</code> | <code>delete()</code> <code>clear()</code></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>如果想在<strong>创建的同时初始化实例</strong>，则可以给 Set 构造函数传入一个<strong>可迭代对象</strong>，其中需要包含插入到新集合实例中的元素：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 使用数组初始化集合</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(s1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用自定义迭代器初始化集合</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">*()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(s2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"></span></code></pre></div><p>初始化之后，可以使用 <code>add()</code>增加值，使用 <code>has()</code>查询，通过 <code>size</code> 取得元素数量，以及使用 <code>delete()</code>和 <code>clear()</code>删除元素</p><blockquote><p>与 Map 类似，Set 可以包含<strong>任何 JavaScript 数据类型</strong>作为值。</p></blockquote><h2 id="顺序与迭代" tabindex="-1">顺序与迭代 <a class="header-anchor" href="#顺序与迭代" aria-hidden="true">#</a></h2><p>跟 Map 十分相似：集合实例可以提供一个迭代器（<code>Iterator</code>），能以插入顺序生成集合内容。可以通过 <code>values()</code>方法及其别名方法 <code>keys()</code>（或者 <code>Symbol.iterator</code> 属性，它引用 <code>values()</code>）取得这个迭代器。（代码略）</p><p>因为 <strong><code>values()</code> 是默认迭代器</strong>，所以可以直接对集合实例使用扩展操作，把<strong>集合转换为数组</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">val3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">s])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;val1&quot;, &quot;val2&quot;, &quot;val3&quot;]</span></span>
<span class="line"></span></code></pre></div><br><hr><p>从各方面来看，Set 跟 Map 都很相似，只是 API 稍有调整。</p>`,17),e=[p];function t(c,r,D,y,F,i){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
