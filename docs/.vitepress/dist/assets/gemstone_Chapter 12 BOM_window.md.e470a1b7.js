import{_ as s,c as n,o as a,d as o}from"./app.cebf1889.js";const C=JSON.parse('{"title":"window 对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"Global 作用域","slug":"global-作用域","link":"#global-作用域","children":[]},{"level":2,"title":"像素比","slug":"像素比","link":"#像素比","children":[]},{"level":2,"title":"视口位置","slug":"视口位置","link":"#视口位置","children":[]},{"level":2,"title":"导航与打开新窗口","slug":"导航与打开新窗口","link":"#导航与打开新窗口","children":[]},{"level":2,"title":"定时器","slug":"定时器","link":"#定时器","children":[{"level":3,"title":"setTimeout()","slug":"settimeout","link":"#settimeout","children":[]},{"level":3,"title":"setInterval()","slug":"setinterval","link":"#setinterval","children":[]}]},{"level":2,"title":"系统对话框","slug":"系统对话框","link":"#系统对话框","children":[{"level":3,"title":"alert()","slug":"alert","link":"#alert","children":[]},{"level":3,"title":"confirm()","slug":"confirm","link":"#confirm","children":[]},{"level":3,"title":"prompt()","slug":"prompt","link":"#prompt","children":[]}]}],"relativePath":"gemstone/Chapter 12 BOM/window.md","lastUpdated":1677223097000}'),l={name:"gemstone/Chapter 12 BOM/window.md"},e=o(`<blockquote><p>BOM(Browser Object Model) 是使用 JavaScript 开发 Web 应用程序的核心。BOM 提供了与网页无关的<strong>浏览器功能对象</strong>。</p></blockquote><hr><h1 id="window-对象" tabindex="-1">window 对象 <a class="header-anchor" href="#window-对象" aria-hidden="true">#</a></h1><p>难度：⭐️⭐️</p><blockquote><p>💌 BOM 的核心是 window 对象，表示<strong>浏览器的实例</strong>。这一块不难，但是是很容易被忽视的内容。</p></blockquote><p>window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 <strong><code>Global</code> 对象</strong>，另一个就是 <strong>浏览器窗口的 JavaScript 接口</strong>。这意味着网页中定义的所有对象、变量和函数都以 window 作为其 Global 对象，都可以访问其上定义的 <code>parseInt()</code>等全局方法。</p><h2 id="global-作用域" tabindex="-1">Global 作用域 <a class="header-anchor" href="#global-作用域" aria-hidden="true">#</a></h2><p>因为 <code>window</code> 对象被复用为 ECMAScript 的 Global 对象，所以<strong>通过 <code>var</code> 声明的所有全局变量和函数都会变成 <code>window</code> 对象的属性和方法</strong>。但是如果使用 <code>let</code> 或 <code>const</code> 替代 <code>var</code>，则不会把变量添加给全局对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// var</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">peter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// peter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// let const</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">29</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sayAge </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#82AAFF;">sayAge</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayAge</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// TypeError: window.sayAge is not a function</span></span>
<span class="line"></span></code></pre></div><blockquote><p>JavaScript 中有很多对象都暴露在全局作用域中，比如 <code>location</code> 和 <code>navigator</code>，因而它们也是 <code>window</code> 对象的属性。</p></blockquote><h2 id="像素比" tabindex="-1">像素比 <a class="header-anchor" href="#像素比" aria-hidden="true">#</a></h2><p>看到一个之前没见过的定义：<br> CSS 像素是 Web 开发中使用的统一像素单位。<strong>这个单位的背后其实是一个角度：0.0213°</strong>。 （如果屏幕距离人眼是一臂长，则以这个角度计算的 CSS 像素大小约为 1/96 英寸。）<br>这样定义像素大小是为了<strong>在不同设备上统一标准</strong>。</p><h2 id="视口位置" tabindex="-1">视口位置 <a class="header-anchor" href="#视口位置" aria-hidden="true">#</a></h2><p>度量<strong>文档相对于视口滚动距离</strong>的属性有两对，返回相等的值：<code>window.pageXoffset / window.scrollX</code> 和 <code>window.pageYoffset / window.scrollY</code>。</p><p>可以使用 <code>scroll()</code>、<code>scrollTo()</code>和 <code>scrollBy()</code>方法滚动页面：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 相对于当前视口向右滚动 40 像素</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollBy</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 滚动到页面左上角</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollTo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这几个方法也都接收一个 <strong><code>ScrollToOptions</code> 字典</strong>，除了提供偏移值，还可以通过 <strong><code>behavior</code></strong> 属性告诉浏览器是否<strong>平滑滚动</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 正常滚动</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollTo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">behavior</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auto</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 平滑滚动</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollTo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">behavior</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">smooth</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="导航与打开新窗口" tabindex="-1">导航与打开新窗口 <a class="header-anchor" href="#导航与打开新窗口" aria-hidden="true">#</a></h2><blockquote><p>window.open()</p></blockquote><p><code>window.open()</code> 方法可以用于导航到指定 URL，也可以用于打开新浏览器窗口。这个方法通常接收 3 个参数：要加载的 <strong>URL</strong>、<strong>目标窗口</strong>、<strong>特性字符串</strong>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.wrox.com/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">topFrame</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>执行这行代码的结果就如同用户点击了一个 <strong>href 属性为&quot;<a href="http://www.wrox.com" target="_blank" rel="noreferrer">http://www.wrox.com</a>&quot;</strong> 、 <strong>target 属性为&quot;topFrame&quot;</strong> 的链接。<br> 如果有一个窗口名叫&quot;topFrame&quot;，则这个窗口就会打开这个 URL；否则就会打开一个新窗口并将其命名为&quot;topFrame&quot;（但是这个我在 Chrome 上试验，没有得到预期的效果）。<br> 第二个参数也可以是一个特殊的窗口名，比如<code>_self</code>、<code>_parent</code>、<code>_top</code> 或<code>_blank</code>。</p><p><strong>特性字符串</strong>是一个逗号分隔的设置字符串，用于指定<strong>新窗口包含的特性</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> wroxWin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.wrox.com/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wroxWindow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">height=400,width=400,top=10,left=10,resizable=yes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">wroxWin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 关闭该窗口</span></span>
<span class="line"></span></code></pre></div><p>上面就用到了一些常用的特性字符串。</p><h2 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-hidden="true">#</a></h2><blockquote><p><code>setTimeout()</code> <code>setInterval()</code></p></blockquote><h3 id="settimeout" tabindex="-1">setTimeout() <a class="header-anchor" href="#settimeout" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在 1 秒后显示警告框</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>JavaScript 是单线程的，所以每次只能执行一段代码。<strong>为了调度不同代码的执行</strong>，JavaScript 维护了一个<strong>任务队列</strong>，其中的任务会按照添加到队列的先后顺序执行。<code>setTimeout()</code>的第二个参数只是告诉 JavaScript 引擎<strong>在指定的毫秒数过后把任务添加到这个队列</strong>。 <br></p><blockquote><p>❗❗ <strong>由此可知：</strong> 如果队列是空的，则会立即执行该代码。如果队列不是空的，则代码必须等待前面的任务执行完才能执行。</p></blockquote><h3 id="setinterval" tabindex="-1">setInterval() <a class="header-anchor" href="#setinterval" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>⚠ <strong>注意：<strong>这里的关键点是，第二个参数，也就是间隔时间，指的是</strong>向队列添加新任务之前等待的时间</strong>。比如，调用 <code>setInterval()</code> 的时间为 01:00:00，间隔时间为 3000 毫秒。这意味着 01:00:03 时，浏览器会把任务添加到执行队列。<strong>浏览器不关心这个任务什么时候执行或者执行要花多长时间</strong>。因此，到了 01:00:06，它会再向队列中添加一个任务。</p><blockquote><p>由此可看出，执行时间短、非阻塞的回调函数比较适合 <code>setInterval()</code> （高情商 🤨）。说直白一点，一个任务<strong>结束</strong>和下一个任务<strong>开始</strong>之间的时间间隔是<strong>无法保证</strong>的，<strong>有些循环定时任务可能会因此而被跳过</strong>！<code>setIntervale()</code> 在实践中很少会在生产环境下使用。</p></blockquote><p>相关链接：<a href="/blog/handwritten/setInterval(setTimeout).html">基于 setTimeout 实现 setInterval</a></p><p>ps：相对于 <code>setTimeout()</code>而言，<strong>取消定时</strong>的能力对 <code>setInterval()</code>更加重要。毕竟，如果一直不管它，那么定时任务会一直执行到页面卸载。</p><h2 id="系统对话框" tabindex="-1">系统对话框 <a class="header-anchor" href="#系统对话框" aria-hidden="true">#</a></h2><blockquote><p><code>alert()</code> <code>confirm()</code> <code>prompt()</code></p></blockquote><p>使用 <code>alert()</code>、<code>confirm()</code>和 <code>prompt()</code>方法，可以让浏览器调用系统对话框向用户显示消息。这些对话框都是<strong>同步</strong>的模态对话框，即在它们显示的时候，<strong>代码会停止执行</strong>，在它们消失以后，代码才会恢复执行。</p><h3 id="alert" tabindex="-1">alert() <a class="header-anchor" href="#alert" aria-hidden="true">#</a></h3><p><code>alert()</code>只接收一个参数。调用 <code>alert()</code>时，传入的字符串会显示在一个系统对话框中。对话框只有一个“OK”（确定）按钮。如果传给 <code>alert()</code>的参数<strong>不是一个原始字符串</strong>，则会<strong>调用这个值的 <code>toString()</code>方法将其转换为字符串</strong>。</p><h3 id="confirm" tabindex="-1">confirm() <a class="header-anchor" href="#confirm" aria-hidden="true">#</a></h3><p>确认框有两个按钮：“Cancel”（取消）和“OK”（确定）。使用示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#82AAFF;">confirm</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Are you sure?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">I&#39;m so glad you&#39;re sure!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">I&#39;m sorry to hear you&#39;re not sure.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="prompt" tabindex="-1">prompt() <a class="header-anchor" href="#prompt" aria-hidden="true">#</a></h3><p>除了 OK 和 Cancel 按钮，提示框还会显示一个文本框，让用户<strong>输入内容</strong>。如果用户单击了 OK 按钮，则 <code>prompt()</code>会<strong>返回文本框中的值</strong>。如果用户单击了 Cancel 按钮，或者对话框被关闭，则 <code>prompt()</code>会<strong>返回 null</strong>。下面是一个例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prompt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What is your name? </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (result </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Welcome, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><hr><p>由于不需要 HTML 和 CSS，所以系统对话框是 Web 应用程序<strong>最简单快捷</strong>的沟通手段。</p>`,51),p=[e];function t(r,c,i,y,D,F){return a(),n("div",null,p)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
